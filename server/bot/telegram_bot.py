import logging
from typing import Optional
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
import asyncio

from supabase_storage import SupabaseStorage

class TelegramBot:
    def __init__(self, token: str = None):
        self.logger = logging.getLogger(__name__)
        
        if not token:
            self.logger.error("‚ùå –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω Telegram —Ç–æ–∫–µ–Ω!")
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è Telegram —Ç–æ–∫–µ–Ω")
        
        self.bot = Bot(
            token=token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()
        self.data_manager = SupabaseStorage()
        
        self._register_handlers()
        self.logger.info("‚úÖ Telegram –±–æ—Ç (aiogram) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Webhook")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ aiogram"""
        self.dp.message(Command("start"))(self._start_command)
        self.dp.message(Command("register"))(self._register_command)
        self.dp.message(Command("help"))(self._help_command)
        self.dp.message(Command("status"))(self._status_command)
        self.dp.message(Command("stats"))(self._stats_command)
        self.dp.message(Command("alerts"))(self._alerts_command)
        self.dp.message(Command("wakeup"))(self._wakeup_command)  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"
    
    async def _wakeup_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        await message.answer(
            "üîî <b>–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–±—É–∂–¥–µ–Ω!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/register - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/alerts - –∏—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )
        self.logger.info(f"üîî –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–±—É–∂–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    
    async def _start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer(
            "üõ°Ô∏è <b>BlackCat</b>\n\n"
            "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π "
            "—Å—è–¥–µ—Ç –∑–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/register - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n" 
            "/alerts - –∏—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° <i>–°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç \"–∑–∞—Å—ã–ø–∞—Ç—å\" –ø–æ—Å–ª–µ 15 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
            "–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /wakeup</i>"
        )
        self.logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def _register_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
        try:
            parts = message.text.split()
            if len(parts) != 2:
                await message.answer(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/register COMPUTER_ID</code>\n\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/register A1B2C3D4</code>\n\n"
                    "üí° ID –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ñ–∞–π–ª–µ computer_config.json "
                    "–Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
                )
                return
            
            computer_id = parts[1].strip().upper()
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            existing_user = self.data_manager.get_user_by_computer_id(computer_id)
            if existing_user and existing_user != user_id:
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n\n"
                    "üí° –ö–∞–∂–¥—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                )
                return
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = self.data_manager.register_user(
                user_id=user_id,
                computer_id=computer_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            
            if success:
                await message.answer(
                    f"‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä <code>{computer_id}</code> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç "
                    "–Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ –∑–∞ –≤–∞—à–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.\n\n"
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /status\n"
                    "–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: /alerts"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
    
    async def _status_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            user_id = message.from_user.id
            computer_id = self.data_manager.get_computer_by_user_id(user_id)
            
            if computer_id:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                user_alerts = self.data_manager.get_alerts_by_computer(computer_id)
                total_alerts = len(user_alerts)
                recent_alerts = user_alerts[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                
                status_text = (
                    f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                    f"üíª –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä: <code>{computer_id}</code>\n"
                    f"üë§ –í–∞—à ID: <code>{user_id}</code>\n"
                    f"üì® –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_alerts}\n"
                    f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤"
                )
                
                if recent_alerts:
                    status_text += "\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
                    for alert in reversed(recent_alerts):
                        status_text += f"‚Ä¢ {alert['timestamp'][:16]} - {alert['detection_count']} –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π\n"
                
                await message.answer(status_text)
            else:
                await message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/register COMPUTER_ID</code>\n\n"
                    "üí° ID –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ñ–∞–π–ª–µ computer_config.json "
                    "–Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
 
    async def _help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await message.answer(
            "<b>BlackCat - –ü–æ–º–æ—â—å</b>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/register COMPUTER_ID - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ—ë –∏ –ø–æ–ª—É—á–∏—Ç–µ ID –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n"
            "3. –ü—Ä–∏–≤—è–∂–∏—Ç–µ ID —á–µ—Ä–µ–∑ /register\n"
            "4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞—Ö!\n\n"
            "üí° <i>–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—Ü –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π.</i>"
        )
    
    async def send_alert_to_user(
        self, 
        computer_id: str,
        message: str,
        detection_count: int,
        timestamp: str,
        stranger_photo_path: Optional[str] = None,
        screenshot_path: Optional[str] = None
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ computer_id
            user_chat_id = self.data_manager.get_user_by_computer_id(computer_id)
            
            if not user_chat_id:
                self.logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ {computer_id}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.data_manager.save_alert(computer_id, detection_count, message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            alert_message = (
                f"üö® <b>–û–ë–ù–ê–†–£–ñ–ï–ù –ù–ï–ó–ù–ê–ö–û–ú–ï–¶!</b>\n\n"
                f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä: <code>{computer_id}</code>\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π: {detection_count}\n"
                f"üïê –í—Ä–µ–º—è: {timestamp}\n"
                f"üìù {message}\n\n"
                f"üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é: /alerts"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(chat_id=user_chat_id, text=alert_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if stranger_photo_path and Path(stranger_photo_path).exists():
                try:
                    photo = FSInputFile(stranger_photo_path)
                    await self.bot.send_photo(
                        chat_id=user_chat_id,
                        photo=photo,
                        caption="üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ"
                    )
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if screenshot_path and Path(screenshot_path).exists():
                try:
                    screenshot = FSInputFile(screenshot_path)
                    await self.bot.send_photo(
                        chat_id=user_chat_id,
                        photo=screenshot,
                        caption="üñ•Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"
                    )
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            
            self.logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_chat_id}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ app.py
telegram_bot: Optional[TelegramBot] = None

async def create_bot():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global telegram_bot
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if token:
        telegram_bot = TelegramBot(token=token)
    return telegram_bot