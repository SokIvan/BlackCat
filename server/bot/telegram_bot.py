import logging
from typing import Optional
from pathlib import Path
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile
import asyncio

class TelegramBot:
    def __init__(self, token: str = None, config_path: str = "bot_config.json"):
        self.logger = logging.getLogger(__name__)
        self.config = self._load_config(config_path, token)
        
        if self.config['telegram_token'] == "YOUR_BOT_TOKEN_HERE":
            self.logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram —Ç–æ–∫–µ–Ω!")
            raise ValueError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_TOKEN –≤ bot_config.json")
        
        self.bot = Bot(
            token=self.config['telegram_token'],
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()
        
        self._register_handlers()
        self.logger.info("‚úÖ Telegram –±–æ—Ç (aiogram) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self, config_path: str, token: str = None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
        config_file = Path(config_path)
        default_config = {
            "telegram_token": token or "YOUR_BOT_TOKEN_HERE",
            "admin_chat_id": None
        }
        
        if config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    user_config = json.load(f)
                    default_config.update(user_config)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        
        return default_config
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ aiogram"""
        self.dp.message(Command("start"))(self._start_command)
        self.dp.message(Command("register"))(self._register_command)
        self.dp.message(Command("help"))(self._help_command)
    
    async def _start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer(
            "üõ°Ô∏è <b>Computer Guard Bot</b>\n\n"
            "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π "
            "—Å—è–¥–µ—Ç –∑–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.\n\n"
            "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/register YOUR_COMPUTER_ID</code>\n\n"
            "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏: /help"
        )
    
    async def _register_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
        try:
            parts = message.text.split()
            if len(parts) != 2:
                await message.answer(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/register COMPUTER_ID</code>\n\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/register A1B2C3D4</code>"
                )
                return
            
            computer_id = parts[1].strip().upper()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registrations = {}
            reg_file = Path("user_registrations.json")
            if reg_file.exists():
                with open(reg_file, 'r', encoding='utf-8') as f:
                    registrations = json.load(f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –∫–æ–º–ø—å—é—Ç–µ—Ä
            registrations[str(message.from_user.id)] = {
                "computer_id": computer_id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "registered_at": message.date.isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(reg_file, 'w', encoding='utf-8') as f:
                json.dump(registrations, f, indent=2, ensure_ascii=False)
            
            await message.answer(
                f"‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä <code>{computer_id}</code> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ –∑–∞ –≤–∞—à–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º."
            )
            self.logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏–≤—è–∑–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä {computer_id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
    
    async def _help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await message.answer(
            "üõ°Ô∏è <b>Computer Guard Bot - –ü–æ–º–æ—â—å</b>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/register COMPUTER_ID - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ—ë –∏ –ø–æ–ª—É—á–∏—Ç–µ ID –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n"
            "3. –ü—Ä–∏–≤—è–∂–∏—Ç–µ ID —á–µ—Ä–µ–∑ /register\n"
            "4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞—Ö!\n\n"
            "üí° <i>–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—Ü –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π.</i>"
        )
    
    async def send_alert_to_user(
        self, 
        computer_id: str,
        message: str,
        detection_count: int,
        timestamp: str,
        stranger_photo_path: Optional[str] = None,
        screenshot_path: Optional[str] = None
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ aiogram"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ computer_id
            user_chat_id = await self._find_user_by_computer_id(computer_id)
            
            if not user_chat_id:
                self.logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ {computer_id}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            alert_message = (
                f"üö® <b>–û–ë–ù–ê–†–£–ñ–ï–ù –ù–ï–ó–ù–ê–ö–û–ú–ï–¶!</b>\n\n"
                f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä: <code>{computer_id}</code>\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π: {detection_count}\n"
                f"üïê –í—Ä–µ–º—è: {timestamp}\n"
                f"üìù {message}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(chat_id=user_chat_id, text=alert_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if stranger_photo_path and Path(stranger_photo_path).exists():
                photo = FSInputFile(stranger_photo_path)
                await self.bot.send_photo(
                    chat_id=user_chat_id,
                    photo=photo,
                    caption="üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if screenshot_path and Path(screenshot_path).exists():
                screenshot = FSInputFile(screenshot_path)
                await self.bot.send_photo(
                    chat_id=user_chat_id,
                    photo=screenshot,
                    caption="üñ•Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"
                )
            
            self.logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_chat_id}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def _find_user_by_computer_id(self, computer_id: str) -> Optional[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ computer_id"""
        try:
            reg_file = Path("user_registrations.json")
            if reg_file.exists():
                with open(reg_file, 'r', encoding='utf-8') as f:
                    registrations = json.load(f)
                
                for chat_id_str, user_data in registrations.items():
                    if user_data.get('computer_id') == computer_id:
                        return int(chat_id_str)
            
            self.logger.warning(f"‚ö†Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä {computer_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (–¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.dp.start_polling(self.bot)