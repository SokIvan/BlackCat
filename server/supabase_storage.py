import logging
from typing import Dict, Optional, List
from supabase import create_client, Client
import os
from datetime import datetime

class SupabaseStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.url = os.getenv('SUPABASE_URL')
        self.key = os.getenv('SUPABASE_KEY')
        
        if not self.url or not self.key:
            self.logger.error("‚ùå SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            raise ValueError("–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase")
        
        try:
            self.client: Client = create_client(self.url, self.key)
            self.logger.info("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            response = self.client.from_('users').select('count', count='exact').limit(1).execute()
            self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
            raise
    
    def register_user(self, user_id: int, computer_id: str, username: str = None, first_name: str = None) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ computer_id –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            existing_user = self.client.from_('users')\
                .select('user_id')\
                .eq('computer_id', computer_id)\
                .execute()
            
            if existing_user.data and existing_user.data[0]['user_id'] != user_id:
                self.logger.warning(f"‚ö†Ô∏è Computer {computer_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                return False
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'user_id': user_id,
                'computer_id': computer_id,
                'username': username,
                'first_name': first_name,
                'registered_at': datetime.now().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert (–≤—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
            response = self.client.from_('users')\
                .upsert(user_data, on_conflict='user_id')\
                .execute()
            
            if response.data:
                self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≤—è–∑–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä {computer_id}")
                return True
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def get_user_by_computer_id(self, computer_id: str) -> Optional[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç user_id –ø–æ computer_id"""
        try:
            response = self.client.from_('users')\
                .select('user_id')\
                .eq('computer_id', computer_id)\
                .execute()
            
            if response.data:
                return response.data[0]['user_id']
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def get_computer_by_user_id(self, user_id: int) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç computer_id –ø–æ user_id"""
        try:
            response = self.client.from_('users')\
                .select('computer_id')\
                .eq('user_id', user_id)\
                .execute()
            
            if response.data:
                return response.data[0]['computer_id']
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {e}")
            return None
    
    def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            response = self.client.from_('users')\
                .select('*')\
                .eq('user_id', user_id)\
                .execute()
            
            if response.data:
                return response.data[0]
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return None
    
    def save_alert(self, computer_id: str, detection_count: int, message: str = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É"""
        try:
            alert_data = {
                'computer_id': computer_id,
                'detection_count': detection_count,
                'message': message,
                'created_at': datetime.now().isoformat()
            }
            
            response = self.client.from_('alerts')\
                .insert(alert_data)\
                .execute()
            
            if response.data:
                self.logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {computer_id}")
                return True
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def get_alerts_by_computer(self, computer_id: str, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
        try:
            response = self.client.from_('alerts')\
                .select('*')\
                .eq('computer_id', computer_id)\
                .order('created_at', desc=True)\
                .limit(limit)\
                .execute()
            
            return response.data if response.data else []
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    def get_recent_alerts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            response = self.client.from_('alerts')\
                .select('*')\
                .order('created_at', desc=True)\
                .limit(limit)\
                .execute()
            
            return response.data if response.data else []
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            response = self.client.from_('users')\
                .select('*')\
                .execute()
            
            return response.data if response.data else []
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_all_computers(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã"""
        try:
            response = self.client.from_('users')\
                .select('computer_id, user_id, username, registered_at')\
                .execute()
            
            return response.data if response.data else []
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: {e}")
            return []
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_response = self.client.from_('users')\
                .select('id', count='exact')\
                .execute()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
            computers_response = self.client.from_('users')\
                .select('computer_id', count='exact')\
                .execute()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            alerts_response = self.client.from_('alerts')\
                .select('id', count='exact')\
                .execute()
            
            return {
                "total_users": users_response.count or 0,
                "total_computers": computers_response.count or 0,
                "total_alerts": alerts_response.count or 0,
                "last_updated": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "total_users": 0,
                "total_computers": 0,
                "total_alerts": 0,
                "last_updated": datetime.now().isoformat()
            }
    
    def delete_user(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)"""
        try:
            response = self.client.from_('users')\
                .delete()\
                .eq('user_id', user_id)\
                .execute()
            
            return bool(response.data)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False