import logging
from typing import Dict, Optional, List
import os
from datetime import datetime
import requests
import json

class SupabaseStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase —á–µ—Ä–µ–∑ REST API"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.url = os.getenv('SUPABASE_URL')
        self.key = os.getenv('SUPABASE_KEY')
        
        if not self.url or not self.key:
            self.logger.error("‚ùå SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            raise ValueError("–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è REST API
        self.headers = {
            'apikey': self.key,
            'Authorization': f'Bearer {self.key}',
            'Content-Type': 'application/json',
            'Prefer': 'return=representation'
        }
        
        self.logger.info("‚úÖ Supabase REST API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self._test_connection()
    
    def _test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
        try:
            response = requests.get(
                f"{self.url}/rest/v1/users?select=id&limit=1",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                raise ConnectionError(f"Supabase –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
            raise
    
    def _make_request(self, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Supabase REST API"""
        try:
            url = f"{self.url}/rest/v1/{endpoint}"
            
            if method.upper() == 'GET':
                response = requests.get(url, headers=self.headers, timeout=10)
            elif method.upper() == 'POST':
                response = requests.post(url, headers=self.headers, json=data, timeout=10)
            elif method.upper() == 'PUT':
                response = requests.put(url, headers=self.headers, json=data, timeout=10)
            elif method.upper() == 'DELETE':
                response = requests.delete(url, headers=self.headers, timeout=10)
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}")
            
            if response.status_code in [200, 201, 204]:
                return response.json() if response.content else True
            else:
                self.logger.error(f"‚ùå HTTP {response.status_code}: {response.text}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase: {e}")
            return None
    
    def register_user(self, user_id: int, computer_id: str, username: str = None, first_name: str = None) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ computer_id –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            existing_user = self._make_request(
                'GET', 
                f"users?computer_id=eq.{computer_id}&select=user_id"
            )
            
            if existing_user and existing_user[0]['user_id'] != user_id:
                self.logger.warning(f"‚ö†Ô∏è Computer {computer_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                return False
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'user_id': user_id,
                'computer_id': computer_id,
                'username': username,
                'first_name': first_name,
                'registered_at': datetime.now().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert —á–µ—Ä–µ–∑ ON CONFLICT
            response = self._make_request(
                'POST',
                'users',
                user_data
            )
            
            if response:
                self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≤—è–∑–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä {computer_id}")
                return True
            else:
                # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                update_response = self._make_request(
                    'PUT',
                    f"users?user_id=eq.{user_id}",
                    user_data
                )
                
                if update_response:
                    self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                    return True
                else:
                    self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def get_user_by_computer_id(self, computer_id: str) -> Optional[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç user_id –ø–æ computer_id"""
        try:
            response = self._make_request(
                'GET',
                f"users?computer_id=eq.{computer_id}&select=user_id"
            )
            
            if response and len(response) > 0:
                return response[0]['user_id']
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def get_computer_by_user_id(self, user_id: int) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç computer_id –ø–æ user_id"""
        try:
            response = self._make_request(
                'GET',
                f"users?user_id=eq.{user_id}&select=computer_id"
            )
            
            if response and len(response) > 0:
                return response[0]['computer_id']
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {e}")
            return None
    
    def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            response = self._make_request(
                'GET',
                f"users?user_id=eq.{user_id}"
            )
            
            if response and len(response) > 0:
                return response[0]
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return None
    
    def save_alert(self, computer_id: str, detection_count: int, message: str = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É"""
        try:
            alert_data = {
                'computer_id': computer_id,
                'detection_count': detection_count,
                'message': message,
                'created_at': datetime.now().isoformat()
            }
            
            response = self._make_request('POST', 'alerts', alert_data)
            
            if response:
                self.logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {computer_id}")
                return True
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def get_alerts_by_computer(self, computer_id: str, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
        try:
            response = self._make_request(
                'GET',
                f"alerts?computer_id=eq.{computer_id}&order=created_at.desc&limit={limit}"
            )
            
            return response if response else []
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    def get_recent_alerts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            response = self._make_request(
                'GET',
                f"alerts?order=created_at.desc&limit={limit}"
            )
            
            return response if response else []
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            response = self._make_request('GET', 'users')
            return response if response else []
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_all_computers(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã"""
        try:
            response = self._make_request('GET', 'users?select=computer_id,user_id,username,registered_at')
            return response if response else []
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: {e}")
            return []
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_response = self._make_request('GET', 'users?select=id')
            users_count = len(users_response) if users_response else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            alerts_response = self._make_request('GET', 'alerts?select=id')
            alerts_count = len(alerts_response) if alerts_response else 0
            
            return {
                "total_users": users_count,
                "total_computers": users_count,  # –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = –æ–¥–∏–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä
                "total_alerts": alerts_count,
                "last_updated": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "total_users": 0,
                "total_computers": 0,
                "total_alerts": 0,
                "last_updated": datetime.now().isoformat()
            }
    
    def delete_user(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)"""
        try:
            response = self._make_request('DELETE', f"users?user_id=eq.{user_id}")
            return response is not None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False