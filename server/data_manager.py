import json
import logging
from pathlib import Path
from typing import Dict, Optional, List

class DataManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–∞–π–ª–∞—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render"""
    
    def __init__(self, data_dir: str = "data"):
        self.logger = logging.getLogger(__name__)
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.users_file = self.data_dir / "users.json"
        self.computers_file = self.data_dir / "computers.json"
        self.alerts_file = self.data_dir / "alerts.json"
        
        self._init_data_files()
    
    def _init_data_files(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        files_to_create = {
            self.users_file: {},
            self.computers_file: {},
            self.alerts_file: []
        }
        
        for file_path, default_data in files_to_create.items():
            if not file_path.exists():
                self._save_data(file_path, default_data)
                self.logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {file_path.name}")
    
    def _load_data(self, file_path: Path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if file_path.exists():
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
            return None
    
    def _save_data(self, file_path: Path, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_path}: {e}")
            return False
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===
    
    def register_user(self, user_id: int, computer_id: str, username: str = None, first_name: str = None):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä"""
        users = self._load_data(self.users_file) or {}
        computers = self._load_data(self.computers_file) or {}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[str(user_id)] = {
            "computer_id": computer_id,
            "username": username,
            "first_name": first_name,
            "registered_at": self._get_timestamp()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        computers[computer_id] = {
            "user_id": user_id,
            "username": username,
            "registered_at": self._get_timestamp()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ —Ñ–∞–π–ª–∞
        success1 = self._save_data(self.users_file, users)
        success2 = self._save_data(self.computers_file, computers)
        
        if success1 and success2:
            self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≤—è–∑–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä {computer_id}")
            return True
        else:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return False
    
    def get_user_by_computer_id(self, computer_id: str) -> Optional[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç user_id –ø–æ computer_id"""
        computers = self._load_data(self.computers_file) or {}
        computer_data = computers.get(computer_id)
        return computer_data.get('user_id') if computer_data else None
    
    def get_computer_by_user_id(self, user_id: int) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç computer_id –ø–æ user_id"""
        users = self._load_data(self.users_file) or {}
        user_data = users.get(str(user_id))
        return user_data.get('computer_id') if user_data else None
    
    def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        users = self._load_data(self.users_file) or {}
        return users.get(str(user_id))
    
    def get_all_users(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self._load_data(self.users_file) or {}
    
    def get_all_computers(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã"""
        return self._load_data(self.computers_file) or {}
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò ===
    
    def save_alert(self, computer_id: str, detection_count: int, timestamp: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏"""
        alerts = self._load_data(self.alerts_file) or []
        
        alert_data = {
            "computer_id": computer_id,
            "detection_count": detection_count,
            "timestamp": timestamp,
            "alert_id": len(alerts) + 1
        }
        
        alerts.append(alert_data)
        
        if self._save_data(self.alerts_file, alerts):
            self.logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {computer_id}")
            return True
        return False
    
    def get_alerts_by_computer(self, computer_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
        alerts = self._load_data(self.alerts_file) or []
        return [alert for alert in alerts if alert.get('computer_id') == computer_id]
    
    def get_recent_alerts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        alerts = self._load_data(self.alerts_file) or []
        return alerts[-limit:] if alerts else []
    
    def _get_timestamp(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é timestamp —Å—Ç—Ä–æ–∫—É"""
        from datetime import datetime
        return datetime.now().isoformat()
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        users = self.get_all_users()
        computers = self.get_all_computers()
        alerts = self._load_data(self.alerts_file) or []
        
        return {
            "total_users": len(users),
            "total_computers": len(computers),
            "total_alerts": len(alerts),
            "last_updated": self._get_timestamp()
        }