import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
import sys
import os
from pathlib import Path
import threading
import webbrowser

class BlackCatApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üê± BlackCat - –°–∏—Å—Ç–µ–º–∞ –æ—Ö—Ä–∞–Ω—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
        self.root.geometry("800x700")
        self.root.resizable(True, True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            self.root.iconbitmap("blackcat.ico")  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ–∑–∂–µ
        except:
            pass
        
        self.setup_gui()
        
    def setup_gui(self):
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ì–ª–∞–≤–Ω–∞—è"
        self.setup_main_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–û–±—É—á–µ–Ω–∏–µ"
        self.setup_training_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.setup_settings_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
        self.setup_instructions_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ "–õ–æ–≥–∏"
        self.setup_logs_tab(notebook)
    
    def setup_main_tab(self, notebook):
        main_frame = ttk.Frame(notebook)
        notebook.add(main_frame, text="üê± –ì–ª–∞–≤–Ω–∞—è")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, 
                               text="üê± BlackCat - –°–∏—Å—Ç–µ–º–∞ –æ—Ö—Ä–∞–Ω—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=20)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status_frame = ttk.LabelFrame(main_frame, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", padding=10)
        status_frame.pack(fill='x', padx=20, pady=10)
        
        self.status_label = ttk.Label(status_frame, text="üî¥ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", 
                                     font=('Arial', 12), foreground='red')
        self.status_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        self.start_btn = ttk.Button(buttons_frame, 
                                   text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ö—Ä–∞–Ω—ã", 
                                   command=self.start_system,
                                   style='Accent.TButton')
        self.start_btn.pack(pady=10, ipadx=20, ipady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_btn = ttk.Button(buttons_frame, 
                                  text="‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", 
                                  command=self.stop_system,
                                  state='disabled')
        self.stop_btn.pack(pady=10, ipadx=20, ipady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        info_frame.pack(fill='x', padx=20, pady=10)
        
        info_text = """
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤ –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        """
        info_label = ttk.Label(info_frame, text=info_text, justify='left')
        info_label.pack(pady=5)
    
    def setup_training_tab(self, notebook):
        training_frame = ttk.Frame(notebook)
        notebook.add(training_frame, text="üéØ –û–±—É—á–µ–Ω–∏–µ")
        
        title_label = ttk.Label(training_frame, 
                               text="üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü", 
                               font=('Arial', 14, 'bold'))
        title_label.pack(pady=20)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–±—É—á–µ–Ω–∏—é
        instruction_frame = ttk.LabelFrame(training_frame, text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–±—É—á–µ–Ω–∏—é", padding=10)
        instruction_frame.pack(fill='x', padx=20, pady=10)
        
        instruction_text = """
1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –ª–∏—Ü –≤ –ø–∞–ø–∫–µ face_dataset/
   - face_dataset/owner/ - –≤–∞—à–∏ —Ñ–æ—Ç–æ (10-15 —à—Ç—É–∫)
   - face_dataset/family/ - —Ñ–æ—Ç–æ —Å–µ–º—å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   - face_dataset/friends/ - —Ñ–æ—Ç–æ –¥—Ä—É–∑–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

2. –§–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
3. –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ
4. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100x100 –ø–∏–∫—Å–µ–ª–µ–π

–ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∑–Ω–∞–∫–æ–º—ã–µ –ª–∏—Ü–∞ –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.
        """
        instruction_label = ttk.Label(instruction_frame, text=instruction_text, justify='left')
        instruction_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        training_buttons_frame = ttk.Frame(training_frame)
        training_buttons_frame.pack(pady=20)
        
        self.train_btn = ttk.Button(training_buttons_frame, 
                                   text="üéì –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", 
                                   command=self.train_model)
        self.train_btn.pack(pady=10, ipadx=20, ipady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
        self.progress = ttk.Progressbar(training_frame, mode='indeterminate')
        self.progress.pack(fill='x', padx=20, pady=10)
        
        self.training_status = ttk.Label(training_frame, text="")
        self.training_status.pack(pady=5)
    
    def setup_settings_tab(self, notebook):
        settings_frame = ttk.Frame(notebook)
        notebook.add(settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        title_label = ttk.Label(settings_frame, 
                               text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", 
                               font=('Arial', 14, 'bold'))
        title_label.pack(pady=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        detection_frame = ttk.LabelFrame(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", padding=10)
        detection_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(detection_frame, text="–ü–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:").grid(row=0, column=0, sticky='w', pady=5)
        self.detection_threshold = tk.StringVar(value="20")
        ttk.Entry(detection_frame, textvariable=self.detection_threshold, width=10).grid(row=0, column=1, pady=5, padx=10)
        
        ttk.Label(detection_frame, text="–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ (—Å–µ–∫—É–Ω–¥—ã):").grid(row=1, column=0, sticky='w', pady=5)
        self.time_window = tk.StringVar(value="60")
        ttk.Entry(detection_frame, textvariable=self.time_window, width=10).grid(row=1, column=1, pady=5, padx=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        interface_frame = ttk.LabelFrame(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", padding=10)
        interface_frame.pack(fill='x', padx=20, pady=10)
        
        self.terminal_visible = tk.BooleanVar(value=True)
        ttk.Checkbutton(interface_frame, 
                       text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ", 
                       variable=self.terminal_visible).pack(anchor='w', pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_buttons_frame = ttk.Frame(settings_frame)
        settings_buttons_frame.pack(pady=20)
        
        ttk.Button(settings_buttons_frame, 
                  text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.save_settings).pack(side='left', padx=10)
        
        ttk.Button(settings_buttons_frame, 
                  text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.reset_settings).pack(side='left', padx=10)
    
    def setup_instructions_tab(self, notebook):
        instructions_frame = ttk.Frame(notebook)
        notebook.add(instructions_frame, text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        
        title_label = ttk.Label(instructions_frame, 
                               text="üìñ –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", 
                               font=('Arial', 14, 'bold'))
        title_label.pack(pady=20)
        
        # –¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        instruction_text = scrolledtext.ScrolledText(instructions_frame, width=80, height=25)
        instruction_text.pack(fill='both', expand=True, padx=20, pady=10)
        
        instructions = """
üê± BLACKCAT - –°–ò–°–¢–ï–ú–ê –û–•–†–ê–ù–´ –ö–û–ú–ü–¨–Æ–¢–ï–†–ê
========================================

1. –ü–û–î–ì–û–¢–û–í–ö–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ
----------------------------------------

1.1. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "üéØ –û–±—É—á–µ–Ω–∏–µ"
   - –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–Ω–∞–∫–æ–º—ã—Ö –ª–∏—Ü –≤ –ø–∞–ø–∫–µ face_dataset/
   - –ù–∞–∂–º–∏—Ç–µ "üéì –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"
   - –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è

1.2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞:
   - –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram
   - –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
   - –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /register

2. –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´
----------------------------------------

2.1. –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
   - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
   - –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

2.2. –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫:
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "üê± –ì–ª–∞–≤–Ω–∞—è"
   - –ù–∞–∂–º–∏—Ç–µ "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ö—Ä–∞–Ω—ã"
   - –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

3. –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢
----------------------------------------

3.1. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏—Ü:
   - –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã
   - –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤—Å–µ –ª–∏—Ü–∞ –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è
   - –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é

3.2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
   - –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–¥—Å—á–µ—Ç
   - –ü–æ—Å–ª–µ 20+ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –∑–∞ 60 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   - –í —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: —Ñ–æ—Ç–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ + —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞

4. –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê
----------------------------------------

BlackCat.py          - –ì–ª–∞–≤–Ω–æ–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main.py             - –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
config.txt          - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
face_dataset/       - –î–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
known_faces_db/     - –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
scripts/            - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

5. –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú
----------------------------------------

5.1. –ö–∞–º–µ—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è:
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –∫–∞–º–µ—Ä—É

5.2. –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞:
   - –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ GUI
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –≤ face_dataset/

5.3. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç:
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É

6. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
----------------------------------------

- –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: Python 3.8+
- –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ: OpenCV + MediaPipe
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü: LBPH –∞–ª–≥–æ—Ä–∏—Ç–º
- GUI: Tkinter
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Windows 10/11

7. –ö–û–ù–¢–ê–ö–¢–´ –ò –ü–û–î–î–ï–†–ñ–ö–ê
----------------------------------------

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π.
        """
        
        instruction_text.insert('1.0', instructions)
        instruction_text.config(state='disabled')  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    
    def setup_logs_tab(self, notebook):
        logs_frame = ttk.Frame(notebook)
        notebook.add(logs_frame, text="üìã –õ–æ–≥–∏")
        
        title_label = ttk.Label(logs_frame, 
                               text="üìã –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã", 
                               font=('Arial', 14, 'bold'))
        title_label.pack(pady=20)
        
        # –ü–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text = scrolledtext.ScrolledText(logs_frame, width=80, height=20)
        self.logs_text.pack(fill='both', expand=True, padx=20, pady=10)
        self.logs_text.config(state='disabled')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        logs_buttons_frame = ttk.Frame(logs_frame)
        logs_buttons_frame.pack(pady=10)
        
        ttk.Button(logs_buttons_frame, 
                  text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.update_logs).pack(side='left', padx=5)
        
        ttk.Button(logs_buttons_frame, 
                  text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs).pack(side='left', padx=5)
        
        ttk.Button(logs_buttons_frame, 
                  text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.save_logs).pack(side='left', padx=5)
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.logs_text.config(state='normal')
        self.logs_text.insert('end', f"{message}\n")
        self.logs_text.see('end')
        self.logs_text.config(state='disabled')
    
    def start_system(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        def run_system():
            try:
                self.log_message("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ö—Ä–∞–Ω—ã...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º main.py
                if self.terminal_visible.get():
                    subprocess.run([sys.executable, "main.py"])
                else:
                    subprocess.run([sys.executable, "main.py"], creationflags=subprocess.CREATE_NO_WINDOW)
                
                self.log_message("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ö—Ä–∞–Ω—ã –∑–∞–ø—É—â–µ–Ω–∞")
                self.status_label.config(text="üü¢ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞", foreground='green')
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_system)
        thread.daemon = True
        thread.start()
        
        self.start_btn.config(state='disabled')
        self.stop_btn.config(state='normal')
    
    def stop_system(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.log_message("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ö—Ä–∞–Ω—ã...")
        self.status_label.config(text="üî¥ –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", foreground='red')
        self.start_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        self.log_message("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def train_model(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        def run_training():
            try:
                self.train_btn.config(state='disabled')
                self.progress.start()
                self.training_status.config(text="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                self.log_message("üéì –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è
                result = subprocess.run([
                    sys.executable, 
                    "scripts/face_trainer.py"
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    self.log_message("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    self.training_status.config(text="‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                else:
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {result.stderr}")
                    self.training_status.config(text="‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:\n{result.stderr}")
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")
            finally:
                self.progress.stop()
                self.train_btn.config(state='normal')
        
        thread = threading.Thread(target=run_training)
        thread.daemon = True
        thread.start()
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.txt"""
        try:
            config_content = f"""# BlackCat System Configuration
terminal_visible={str(self.terminal_visible.get()).lower()}
detection_threshold={self.detection_threshold.get()}
alert_time_window={self.time_window.get()}
camera_index=0
log_level=INFO
"""
            with open("config.txt", "w", encoding="utf-8") as f:
                f.write(config_content)
            
            self.log_message("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def reset_settings(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.terminal_visible.set(True)
        self.detection_threshold.set("20")
        self.time_window.set("60")
        self.log_message("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def update_logs(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞)"""
        self.log_message("üîÅ –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    def clear_logs(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏"""
        self.logs_text.config(state='normal')
        self.logs_text.delete('1.0', 'end')
        self.logs_text.config(state='disabled')
        self.log_message("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open("blackcat_logs.txt", "w", encoding="utf-8") as f:
                logs = self.logs_text.get('1.0', 'end')
                f.write(logs)
            self.log_message("üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ blackcat_logs.txt")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ["main.py", "scripts/face_trainer.py"]
    missing_files = []
    
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        messagebox.showerror(
            "–û—à–∏–±–∫–∞", 
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(missing_files) +
            f"\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    root = tk.Tk()
    
    # –°—Ç–∏–ª—å –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    style = ttk.Style()
    style.configure('Accent.TButton', font=('Arial', 10, 'bold'))
    
    app = BlackCatApp(root)
    app.log_message("üê± BlackCat GUI –∑–∞–ø—É—â–µ–Ω")
    app.log_message("üìÅ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    root.mainloop()

if __name__ == "__main__":
    main()