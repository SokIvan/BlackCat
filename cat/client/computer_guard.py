import cv2
import time
import json
from datetime import datetime
from pathlib import Path
import logging
import requests
import pyautogui

from .face_detector import FaceDetector
from .face_recognizer import FaceRecognizer

class ComputerGuard:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ö—Ä–∞–Ω—ã"""
    
    def __init__(self, computer_id: str = None, config=None):
        self.logger = logging.getLogger(__name__)
        self.config = config
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if config:
            self.detection_threshold = config.get_int('detection_threshold', 30)
            self.alert_threshold = config.get_int('alert_threshold', 20)
            self.alert_time_window = config.get_int('alert_time_window', 60)
        else:
            self.detection_threshold = 30
            self.alert_threshold = 20
            self.alert_time_window = 60
        
        self.computer_id = computer_id or self._get_or_create_computer_id()
        self.last_detection_time = None
        self.is_running = False
        
        # –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
        self.detection_counter = 0
        self.detection_timestamps = []
        
        # –§–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.alert_sent = False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
        self.api_config = self._load_api_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.face_detector = FaceDetector()
        self.face_recognizer = FaceRecognizer()
        
        self.logger.info(f"üñ•Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {self.computer_id}")
        self.logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏: threshold={self.alert_threshold}, window={self.alert_time_window}s")
        self.logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –æ—Ö—Ä–∞–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _load_api_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API"""
        config_path = Path("api_config.json")
        default_config = {
            "server_url": "http://localhost:8000",
            "endpoint": "/api/alert",
            "timeout": 10
        }
        
        if config_path.exists():
            try:
                with open(config_path, 'r') as f:
                    user_config = json.load(f)
                    default_config.update(user_config)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ (—Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        with open(config_path, 'w') as f:
            json.dump(default_config, f, indent=2)
        
        return default_config
    
    def _get_or_create_computer_id(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ ID –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"""
        config_path = Path("computer_config.json")
        
        if config_path.exists():
            with open(config_path, 'r') as f:
                config = json.load(f)
                computer_id = config.get('computer_id')
                if computer_id:
                    self.logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID: {computer_id}")
                    return computer_id
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID
        import uuid
        computer_id = str(uuid.uuid4())[:8].upper()
        
        config = {
            'computer_id': computer_id,
            'created_at': str(datetime.now().isoformat())
        }
        
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=2)
        
        self.logger.info(f"üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ID: {computer_id}")
        print(f"\nüîë –í–ê–® ID –ö–û–ú–ü–¨–Æ–¢–ï–†–ê: {computer_id}")
        print("‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ Telegram –±–æ—Ç–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏\n")
        
        return computer_id
    
    def _update_detection_counter(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ"""
        current_time = time.time()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ alert_time_window)
        self.detection_timestamps = [
            ts for ts in self.detection_timestamps 
            if current_time - ts <= self.alert_time_window
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
        self.detection_timestamps.append(current_time)
        self.detection_counter = len(self.detection_timestamps)
        
        self.logger.debug(f"üìä –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π: {self.detection_counter}/{self.alert_threshold}")
        
        # –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —É–ø–∞–ª –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
        if self.detection_counter < self.alert_threshold:
            self.alert_sent = False
            self.logger.debug("üîÑ –§–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω (—Å—á–µ—Ç—á–∏–∫ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞)")
    
    def capture_stranger_photo(self, frame) -> Path:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ —Å –∫–∞–º–µ—Ä—ã"""
        try:
            strangers_dir = Path("strangers_photos")
            strangers_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = strangers_dir / f"stranger_{self.computer_id}_{timestamp}.jpg"
            
            cv2.imwrite(str(filename), frame)
            self.logger.info(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞: {filename}")
            return filename
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞: {e}")
            return None
    
    def take_screenshot(self) -> Path:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞"""
        try:
            screenshot_dir = Path("screenshots")
            screenshot_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = screenshot_dir / f"screenshot_{self.computer_id}_{timestamp}.png"
            
            screenshot = pyautogui.screenshot()
            screenshot.save(filename)
            
            self.logger.info(f"üñ•Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {filename}")
            return filename
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    def send_api_alert(self, stranger_photo: Path, screenshot: Path):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ API"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            alert_data = {
                "computer_id": self.computer_id,
                "command": "stranger_alert",
                "timestamp": datetime.now().isoformat(),
                "detection_count": self.detection_counter,
                "message": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–µ –ª–∏—Ü–æ {self.detection_counter} —Ä–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É"
            }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            files = {}
            
            if stranger_photo and stranger_photo.exists():
                files['stranger_photo'] = open(stranger_photo, 'rb')
            
            if screenshot and screenshot.exists():
                files['screenshot'] = open(str(screenshot), 'rb')
            
            # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            api_url = f"{self.api_config['server_url']}{self.api_config['endpoint']}"
            
            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: {api_url}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                api_url,
                data=alert_data,
                files=files,
                timeout=self.api_config['timeout']
            )
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            for file in files.values():
                file.close()
            
            if response.status_code == 200:
                self.logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def process_frame(self, frame):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü
        """
        # 1. –î–ï–¢–ï–ö–¶–ò–Ø: –ù–∞—Ö–æ–¥–∏–º –í–°–ï –ª–∏—Ü–∞ –Ω–∞ –∫–∞–¥—Ä–µ
        faces = self.face_detector.detect_faces(frame)
        
        if len(faces) == 0:
            return False  # –õ–∏—Ü –Ω–µ—Ç
        
        self.logger.debug(f"üìπ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {len(faces)}")
        
        # 2. –ü–†–û–í–ï–†–ö–ê: –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü –ª–∏ –æ–Ω
        stranger_found = False
        for (x, y, w, h) in faces:
            # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ª–∏—Ü–∞
            face_roi = frame[y:y+h, x:x+w]
            
            # 3. –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏
            if self.face_recognizer.is_stranger(face_roi):
                stranger_found = True
                break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞
        
        if stranger_found:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π
            self._update_detection_counter()
            
            # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ >= –ø–æ—Ä–æ–≥–∞ –ò –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
            if self.detection_counter >= self.alert_threshold and not self.alert_sent:
                self.logger.info("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π! –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {self.detection_counter} —Ä–∞–∑ –∑–∞ –º–∏–Ω—É—Ç—É! –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞
                stranger_photo = self.capture_stranger_photo(frame)
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot = self.take_screenshot()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
                success = self.send_api_alert(stranger_photo, screenshot)
                
                if success:
                    # –°–¢–ê–í–ò–ú –§–õ–ê–ì —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
                    self.alert_sent = True
                    self.logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –§–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                else:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –§–ª–∞–≥ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        
        return stranger_found
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if not self.face_recognizer.known_face_names:
            self.logger.error("‚ùå –ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            print("‚ùå –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ known_faces_db/")
            return
        
        self.is_running = True
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É
            cap = cv2.VideoCapture(0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ª–∏ –∫–∞–º–µ—Ä–∞
            if not cap.isOpened():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É!")
                print("‚ùå –í–µ–±-–∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
                return
                    
            self.logger.info("‚úÖ –ö–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: {e}")
            return
        
        print("\nüé• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –°–∏—Å—Ç–µ–º–∞ –æ—Ö—Ä–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω–∞.")
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {self.alert_threshold} —Ä–∞–∑ –∑–∞ {self.alert_time_window} —Å–µ–∫")
        print("üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞")
        print("üë§ –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –∫–∞–º–µ—Ä–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        while self.is_running:
            try:
                ret, frame = cap.read()
                if not ret:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä
                stranger_detected = self.process_frame(frame)
                
                if stranger_detected:
                    if self.last_detection_time is None:
                        self.last_detection_time = time.time()
                        self.logger.info("üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü...")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—ã–µ 5 –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π
                    if self.detection_counter % 5 == 0 and not self.alert_sent:
                        print(f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫: {self.detection_counter}/{self.alert_threshold}")
                        
                else:
                    # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –µ—Å–ª–∏ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤ –Ω–µ—Ç
                    self.last_detection_time = None
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                time.sleep(0.5)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(1)
        
        if 'cap' in locals():
            cap.release()
        self.logger.info("‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("‚õî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ö—Ä–∞–Ω—ã...")
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ö—Ä–∞–Ω—ã...")