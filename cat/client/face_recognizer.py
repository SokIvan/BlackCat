import cv2
import pickle
import os
import logging
import numpy as np
from pathlib import Path
import json

class FaceRecognizer:
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –∏—Å–ø–æ–ª—å–∑—É—è LBPH –∏–∑ OpenCV"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)  # –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
        self.recognizer = cv2.face.LBPHFaceRecognizer_create()
        self.known_face_names = []
        self.label_map = {}
        self.load_trained_model()
    
    def load_trained_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        model_path = Path("known_faces_db/face_model.yml")
        labels_path = Path("known_faces_db/labels.json")
        
        if not model_path.exists() or not labels_path.exists():
            self.logger.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É.")
            return False
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            self.recognizer.read(str(model_path))
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∫–∏
            with open(labels_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.known_face_names = data['names']
                self.label_map = data['label_map']
            
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è {len(self.known_face_names)} –ª–∏—Ü")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def is_stranger(self, face_image):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–∏—Ü–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–º
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ª–∏—Ü–æ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
        """
        if not self.known_face_names:
            self.logger.warning("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - –≤—Å–µ –ª–∏—Ü–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏")
            return True
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ grayscale
            gray_face = cv2.cvtColor(face_image, cv2.COLOR_BGR2GRAY)
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏
            gray_face = cv2.resize(gray_face, (100, 100))
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª–∏—Ü–æ
            label, confidence = self.recognizer.predict(gray_face)
            
            # confidence < 50 - —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, > 80 - –ø–ª–æ—Ö–æ–µ
            if confidence < 70:  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                name = self.known_face_names[label]
                self.logger.debug(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω: {name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f})")
                return False
            else:
                self.logger.info(f"üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü! (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f})")
                return True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü–∞: {e}")
            return True